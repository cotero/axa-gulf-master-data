/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.axa.glf.masterdata.service.base;

import aQute.bnd.annotation.ProviderType;

import com.axa.glf.masterdata.model.Vehicle_Catalogue;
import com.axa.glf.masterdata.service.Vehicle_CatalogueLocalService;
import com.axa.glf.masterdata.service.persistence.Vehicle_CataloguePersistence;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the vehicle_ catalogue local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.axa.glf.masterdata.service.impl.Vehicle_CatalogueLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.axa.glf.masterdata.service.impl.Vehicle_CatalogueLocalServiceImpl
 * @see com.axa.glf.masterdata.service.Vehicle_CatalogueLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class Vehicle_CatalogueLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements Vehicle_CatalogueLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.axa.glf.masterdata.service.Vehicle_CatalogueLocalServiceUtil} to access the vehicle_ catalogue local service.
	 */

	/**
	 * Adds the vehicle_ catalogue to the database. Also notifies the appropriate model listeners.
	 *
	 * @param vehicle_Catalogue the vehicle_ catalogue
	 * @return the vehicle_ catalogue that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Vehicle_Catalogue addVehicle_Catalogue(
		Vehicle_Catalogue vehicle_Catalogue) {
		vehicle_Catalogue.setNew(true);

		return vehicle_CataloguePersistence.update(vehicle_Catalogue);
	}

	/**
	 * Creates a new vehicle_ catalogue with the primary key. Does not add the vehicle_ catalogue to the database.
	 *
	 * @param vehicleId the primary key for the new vehicle_ catalogue
	 * @return the new vehicle_ catalogue
	 */
	@Override
	@Transactional(enabled = false)
	public Vehicle_Catalogue createVehicle_Catalogue(long vehicleId) {
		return vehicle_CataloguePersistence.create(vehicleId);
	}

	/**
	 * Deletes the vehicle_ catalogue with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param vehicleId the primary key of the vehicle_ catalogue
	 * @return the vehicle_ catalogue that was removed
	 * @throws PortalException if a vehicle_ catalogue with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Vehicle_Catalogue deleteVehicle_Catalogue(long vehicleId)
		throws PortalException {
		return vehicle_CataloguePersistence.remove(vehicleId);
	}

	/**
	 * Deletes the vehicle_ catalogue from the database. Also notifies the appropriate model listeners.
	 *
	 * @param vehicle_Catalogue the vehicle_ catalogue
	 * @return the vehicle_ catalogue that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Vehicle_Catalogue deleteVehicle_Catalogue(
		Vehicle_Catalogue vehicle_Catalogue) {
		return vehicle_CataloguePersistence.remove(vehicle_Catalogue);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Vehicle_Catalogue.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return vehicle_CataloguePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.axa.glf.masterdata.model.impl.Vehicle_CatalogueModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return vehicle_CataloguePersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.axa.glf.masterdata.model.impl.Vehicle_CatalogueModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return vehicle_CataloguePersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return vehicle_CataloguePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return vehicle_CataloguePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public Vehicle_Catalogue fetchVehicle_Catalogue(long vehicleId) {
		return vehicle_CataloguePersistence.fetchByPrimaryKey(vehicleId);
	}

	/**
	 * Returns the vehicle_ catalogue matching the UUID and group.
	 *
	 * @param uuid the vehicle_ catalogue's UUID
	 * @param groupId the primary key of the group
	 * @return the matching vehicle_ catalogue, or <code>null</code> if a matching vehicle_ catalogue could not be found
	 */
	@Override
	public Vehicle_Catalogue fetchVehicle_CatalogueByUuidAndGroupId(
		String uuid, long groupId) {
		return vehicle_CataloguePersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the vehicle_ catalogue with the primary key.
	 *
	 * @param vehicleId the primary key of the vehicle_ catalogue
	 * @return the vehicle_ catalogue
	 * @throws PortalException if a vehicle_ catalogue with the primary key could not be found
	 */
	@Override
	public Vehicle_Catalogue getVehicle_Catalogue(long vehicleId)
		throws PortalException {
		return vehicle_CataloguePersistence.findByPrimaryKey(vehicleId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(vehicle_CatalogueLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Vehicle_Catalogue.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("vehicleId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(vehicle_CatalogueLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(Vehicle_Catalogue.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("vehicleId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(vehicle_CatalogueLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Vehicle_Catalogue.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("vehicleId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<Vehicle_Catalogue>() {
				@Override
				public void performAction(Vehicle_Catalogue vehicle_Catalogue)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						vehicle_Catalogue);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(Vehicle_Catalogue.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return vehicle_CatalogueLocalService.deleteVehicle_Catalogue((Vehicle_Catalogue)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return vehicle_CataloguePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the vehicle_ catalogues matching the UUID and company.
	 *
	 * @param uuid the UUID of the vehicle_ catalogues
	 * @param companyId the primary key of the company
	 * @return the matching vehicle_ catalogues, or an empty list if no matches were found
	 */
	@Override
	public List<Vehicle_Catalogue> getVehicle_CataloguesByUuidAndCompanyId(
		String uuid, long companyId) {
		return vehicle_CataloguePersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of vehicle_ catalogues matching the UUID and company.
	 *
	 * @param uuid the UUID of the vehicle_ catalogues
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of vehicle_ catalogues
	 * @param end the upper bound of the range of vehicle_ catalogues (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching vehicle_ catalogues, or an empty list if no matches were found
	 */
	@Override
	public List<Vehicle_Catalogue> getVehicle_CataloguesByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<Vehicle_Catalogue> orderByComparator) {
		return vehicle_CataloguePersistence.findByUuid_C(uuid, companyId,
			start, end, orderByComparator);
	}

	/**
	 * Returns the vehicle_ catalogue matching the UUID and group.
	 *
	 * @param uuid the vehicle_ catalogue's UUID
	 * @param groupId the primary key of the group
	 * @return the matching vehicle_ catalogue
	 * @throws PortalException if a matching vehicle_ catalogue could not be found
	 */
	@Override
	public Vehicle_Catalogue getVehicle_CatalogueByUuidAndGroupId(String uuid,
		long groupId) throws PortalException {
		return vehicle_CataloguePersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the vehicle_ catalogues.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.axa.glf.masterdata.model.impl.Vehicle_CatalogueModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of vehicle_ catalogues
	 * @param end the upper bound of the range of vehicle_ catalogues (not inclusive)
	 * @return the range of vehicle_ catalogues
	 */
	@Override
	public List<Vehicle_Catalogue> getVehicle_Catalogues(int start, int end) {
		return vehicle_CataloguePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of vehicle_ catalogues.
	 *
	 * @return the number of vehicle_ catalogues
	 */
	@Override
	public int getVehicle_CataloguesCount() {
		return vehicle_CataloguePersistence.countAll();
	}

	/**
	 * Updates the vehicle_ catalogue in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param vehicle_Catalogue the vehicle_ catalogue
	 * @return the vehicle_ catalogue that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Vehicle_Catalogue updateVehicle_Catalogue(
		Vehicle_Catalogue vehicle_Catalogue) {
		return vehicle_CataloguePersistence.update(vehicle_Catalogue);
	}

	/**
	 * Returns the vehicle_ catalogue local service.
	 *
	 * @return the vehicle_ catalogue local service
	 */
	public Vehicle_CatalogueLocalService getVehicle_CatalogueLocalService() {
		return vehicle_CatalogueLocalService;
	}

	/**
	 * Sets the vehicle_ catalogue local service.
	 *
	 * @param vehicle_CatalogueLocalService the vehicle_ catalogue local service
	 */
	public void setVehicle_CatalogueLocalService(
		Vehicle_CatalogueLocalService vehicle_CatalogueLocalService) {
		this.vehicle_CatalogueLocalService = vehicle_CatalogueLocalService;
	}

	/**
	 * Returns the vehicle_ catalogue persistence.
	 *
	 * @return the vehicle_ catalogue persistence
	 */
	public Vehicle_CataloguePersistence getVehicle_CataloguePersistence() {
		return vehicle_CataloguePersistence;
	}

	/**
	 * Sets the vehicle_ catalogue persistence.
	 *
	 * @param vehicle_CataloguePersistence the vehicle_ catalogue persistence
	 */
	public void setVehicle_CataloguePersistence(
		Vehicle_CataloguePersistence vehicle_CataloguePersistence) {
		this.vehicle_CataloguePersistence = vehicle_CataloguePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.axa.glf.masterdata.model.Vehicle_Catalogue",
			vehicle_CatalogueLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.axa.glf.masterdata.model.Vehicle_Catalogue");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return Vehicle_CatalogueLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return Vehicle_Catalogue.class;
	}

	protected String getModelClassName() {
		return Vehicle_Catalogue.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = vehicle_CataloguePersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = Vehicle_CatalogueLocalService.class)
	protected Vehicle_CatalogueLocalService vehicle_CatalogueLocalService;
	@BeanReference(type = Vehicle_CataloguePersistence.class)
	protected Vehicle_CataloguePersistence vehicle_CataloguePersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}